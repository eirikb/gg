on:
  workflow_dispatch:
  push:

# Plan (tiers):
# A: Build mn (for each target)
# B: Hash (create hash for each target)
# C: Build gg (for each target)
# D: Build m
# E Test (for each os target)
# F: Create release

name: m!
jobs:

  A-mn-OS:
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: macos-latest
            target: x86_64-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            mn2/target
          key: OS-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo pls
        shell: bash
        run: |
          mkdir -p mn2
          mv mn/* mn2
          rm -rf mn
          cd mn2
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]
          then
            sudo apt install musl-tools
          fi
          
          rustup target add ${{ matrix.target }}
          rustup toolchain install stable-${{ matrix.target }}
          cargo build --release --target=${{ matrix.target}}
           find . -type f -name mn.exe -exec cp {} ../mn \;
           find . -type f -name mn -exec cp {} ../mn \;


      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: mn_${{ matrix.target }}
          path: mn


  A-mn-arch:
    strategy:
      matrix:
        include:
          - arch: armv7
            target: armv7-unknown-linux-gnu
          - arch: armv7
            target: armv7-unknown-linux-musl

    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2.1.0

      - uses: actions/cache@v2
        with:
          path: cachus
          key: arch-cargo-x6-${{ hashFiles('**/Cargo.lock') }}

      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu18.04
          githubToken: ${{ github.token }}
          setup: mkdir -p "$PWD/artifacts"
          dockerRunArgs: |
            -v "$PWD/artifacts:/artifacts"
            -v "$PWD/cachus:/cachus"

          install: |
            apt-get -y update
            apt-get -y install cargo

          run: |
            cd mn
            cp -rp /cachus/* . || :
            CARGO_HOME=ok cargo build --release
            cp -rp target /cachus/
            cp -rp ok /cachus/
            cp target/release/mn /artifacts/

      - run: |
          sudo chown -R $(id -u):$(id -g) $PWD/artifacts
          sudo chown -R $(id -u):$(id -g) .
          rm -rf mn
          find $PWD/artifacts -type f -name mn -exec cp {} ./mn \;

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: mn_${{ matrix.target }}
          path: mn


  B-hash:
    needs: [ A-mn-OS, A-mn-arch ]
    runs-on: ubuntu-20.04
    steps:
      - name: Download mn hash
        uses: actions/download-artifact@v2

      - name: Rename to hash
        shell: bash
        run: |
          ls -lah
          du -a
          mkdir hash
          mkdir out
          for dir in mn_*
          do
            echo dir is $dir
            file=$dir/mn
            echo file is $file
            hash=$(sha512sum $file | awk '{ print $1 }')
            echo hash is $hash
            cp $file out/$hash
            echo $hash > hash/hash_$dir
          done
          du -a

      - name: Upload hash artifact
        uses: actions/upload-artifact@v2
        with:
          name: hash
          path: hash

      - uses: LanceMcCarthy/Action-AzureBlobUpload@v1.9.0
        with:
          connection_string: ${{ secrets.ConnectionString }}
          container_name: poc
          source_folder: out


  C-gg-OS:
    needs: B-hash

    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: macos-latest
            target: x86_64-apple-darwin

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Download mn hash
        uses: actions/download-artifact@v2
        with:
          name: hash
          path: hash

      - name: Hash
        # ENV -> CMAKE -> Code very hard. This very easy
        shell: bash
        run: |
          du -a
          hash=$(cat hash/hash_mn_${{ matrix.target }})
          echo "now hash is $hash"
          echo "const char *hash = \"$hash\";" > gg/const.h

      - name: Makus
        shell: bash
        run: |
          cd gg
          if [ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]
          then
            sudo apt install musl-dev musl-tools
            export CC=musl-gcc
          fi
          cmake -B build -DCMAKE_EXE_LINKER_FLAGS='-Os' -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          find . -type f \( -name gg -o -name gg.exe \) -exec cp {} ../gg_${{ matrix.target }} \;

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: gg_${{ matrix.target }}
          path: gg_${{ matrix.target }}


  C-gg-container:
    needs: B-hash

    strategy:
      matrix:
        include:
          - container: alpine
            target: x86_64-unknown-linux-musl

    runs-on: ubuntu-20.04
    container: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v2

      - name: Download mn hash
        uses: actions/download-artifact@v2
        with:
          name: hash
          path: hash

      - name: Hash
        # ENV -> CMAKE -> Code very hard. This very easy
        run: |
          du -a
          hash=$(cat hash/hash_mn_${{ matrix.target }})
          echo "now hash is $hash"
          echo "const char *hash = \"$hash\";" > gg/const.h

      - name: Makus
        run: |
          cd gg
          apk add build-base cmake
          cmake -B build -DCMAKE_EXE_LINKER_FLAGS='-Os' -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          find . -type f \( -name gg -o -name gg.exe \) -exec cp {} ../gg_${{ matrix.target }} \;

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: gg_${{ matrix.target }}
          path: gg_${{ matrix.target }}


  C-gg-arch:
    needs: B-hash

    strategy:
      matrix:
        include:
          - arch: armv7
            target: armv7-unknown-linux-gnu
          - arch: armv7
            target: armv7-unknown-linux-musl

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Download mn hash
        uses: actions/download-artifact@v2
        with:
          name: hash
          path: hash

      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu18.04
          githubToken: ${{ github.token }}
          setup: mkdir -p "$PWD/artifacts"
          dockerRunArgs: |
            -v "$PWD/artifacts:/artifacts"
            -v "$PWD:/yes"

          install: |
            apt-get -y update
            apt-get -y install cmake build-essential musl-dev musl-tools

          run: |
            set -x
            cd /yes
            ls -lah
            hash=$(cat hash/hash_mn_${{ matrix.target }})
            echo "now hash is $hash"
            echo "const char *hash = \"$hash\";" > gg/const.h
            du -a
            cd gg
            ls -lah
            if [ "${{ matrix.target }}" == "armv7-unknown-linux-musl" ]
            then
              export CC=musl-gcc
            fi
            mkdir build
            cd build
            cmake .. -DCMAKE_EXE_LINKER_FLAGS='-Os' -DCMAKE_BUILD_TYPE=Release
            make
            find . -type f \( -name gg -o -name gg.exe \) -exec cp {} /artifacts/gg_${{ matrix.target }} \;

      - run: |
          ls -lah
          ls -lah artifacts
          cp artifacts/* ./

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: gg_${{ matrix.target }}
          path: gg_${{ matrix.target }}



  D-m:
    needs: [ C-gg-OS, C-gg-container, C-gg-arch ]
    runs-on: ubuntu-18.04
    steps:
      - name: Source
        uses: actions/checkout@v2.1.0

      - name: Download gg / mn
        uses: actions/download-artifact@v2

      - name: m
        run: |
          mv m _m
          mkdir -p .cache/m
          rm -rf gg
          for dir in gg*; do
            for file in "$dir"/*; do
              cp "$file" .cache/m/
            done
          done
          # Prevent wine from trying to run (if installed on users PC)
          mv .cache/m/gg_x86_64-pc-windows-gnu .cache/m/gg_zz_x86_64-pc-windows-gnu
          cp _m/init.sh .cache/m/
          chmod +x .cache/m/init.sh
          tar -zpvcf m.tgz .cache
          cat _m/kick.sh m.tgz > m

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: m
          path: m


  E-test-OS:
    needs: D-m
    strategy:
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04, macos-latest, windows-2019, windows-2022 ]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Download m
        uses: actions/download-artifact@v2
        with:
          name: m

      - name: Run!
        run: |
          sh m node
          echo "Nice, let's try again"
          sh m node


  E-test-container:
    needs: D-m
    strategy:
      matrix:
        container: [ ubuntu, debian, alpine, archlinux ]

    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    steps:
      - name: Download m
        uses: actions/download-artifact@v2
        with:
          name: m

      - name: Run!
        run: |
          sh m node
          echo "Nice, let's try again"
          sh m node


  E-test-arch:
    needs: D-m
    strategy:
      matrix:
        include:
          - arch: armv7
            target: armv7-unknown-linux-musl

    runs-on: ubuntu-20.04
    steps:
      - name: Download m
        uses: actions/download-artifact@v2
        with:
          name: m

      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu18.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            -v "$PWD:/ok"
          run: |
            uname -a
            cd /ok
            ls -lah
            sh m node
            echo "Nice, let's try again"
            sh m node


  F-release:
    name: Release!
    needs: [ E-test-OS, E-test-container, E-test-arch ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Generate build number
        id: buildnumber
        uses: einaregilsson/build-number@v3
        with:
          token: ${{ github.token }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.buildnumber.outputs.build_number }}
          release_name: Release ${{ steps.buildnumber.outputs.build_number }}
          draft: false
          prerelease: false

      - name: Download m
        uses: actions/download-artifact@v2
        with:
          name: m

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token}}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./m
          asset_name: m
          asset_content_type: text/x-shellscript
