on:
  workflow_dispatch:
  push:
  pull_request:

# Plan (tiers):
# A: Build mn (for each target)
# B: Build gg (for each target)
# C: Build m
# D: Test (for each os target)
# D: Test (for each container)
# E: Create release

name: m!
jobs:

  #  A-mn-os:
  #    strategy:
  #      matrix:
  #        include:
  #          - os: ubuntu-latest
  #            target: x86_64-unknown-linux-musl
  #          - os: windows-latest
  #            target: x86_64-pc-windows-gnu
  #          - os: macos-latest
  #            target: x86_64-apple-darwin
  #
  #    runs-on: ${{ matrix.os }}
  #    steps:
  #      - uses: actions/checkout@v2
  #
  #      - uses: actions/cache@v2
  #        with:
  #          path: |
  #            ~/.cargo/registry
  #            ~/.cargo/git
  #            mn2/target
  #          key: OS-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #
  #      - name: cargo pls
  #        shell: bash
  #        run: |
  #          mkdir -p mn2
  #          mv mn/* mn2
  #          rm -rf mn
  #          cd mn2
  #          if [ "${{ matrix.os }}" == "ubuntu-latest" ]
  #          then
  #            sudo apt install musl-tools
  #          fi
  #
  #          rustup target add ${{ matrix.target }}
  #          rustup toolchain install stable-${{ matrix.target }}
  #          cargo build --release --target=${{ matrix.target}}
  #           find . -type f -name mn.exe -exec cp {} ../mn \;
  #           find . -type f -name mn -exec cp {} ../mn \;
  #
  #      - name: Hash!
  #        shell: bash
  #        run: |
  #          gcc gg/print_hash.c -o print_hash
  #          ./print_hash mn > hash
  #
  #      - name: Upload artifact
  #        uses: actions/upload-artifact@v2
  #        with:
  #          name: mn_${{ matrix.target }}
  #          path: mn
  #
  #      - name: Upload artifact
  #        uses: actions/upload-artifact@v2
  #        with:
  #          name: hash_${{ matrix.target }}
  #          path: hash
  #
  #      - name: Rename to hash
  #        shell: bash
  #        run: |
  #          hash=$(cat hash)
  #          echo hash is "$hash"
  #          mkdir out
  #          mv mn "out/$hash"
  #
  #      - uses: LanceMcCarthy/Action-AzureBlobUpload@v1.9.0
  #        with:
  #          connection_string: ${{ secrets.ConnectionString }}
  #          container_name: poc
  #          source_folder: out

  A-mn-arch:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2.1.0

      - uses: actions/cache@v2
        with:
          path: ~/cachus
          key: arch-cargo-x1-${{ hashFiles('**/Cargo.lock') }}

      - run: |
          mkdir -p ~/cachus
          ls -lah

      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: armv7
          distro: ubuntu18.04
          githubToken: ${{ github.token }}
          setup: mkdir -p "$PWD/artifacts"
          dockerRunArgs: |
            -v "$PWD/artifacts:/artifacts"
            -v "~/cachus:/cachus"
          install: |
            apt-get -y update
            apt-get -y install cargo

          run: |
            if [ -e /cachus/.cargo ]
            then
              echo make it
              rm -rf ~/.cargo target
              cp -r /cachus/.cargo ~/.cargo
              cp -r /cachus/target .
              ls -lah ~/
              ls -lah .
            fi
            cd mn
            cargo build
            rm -rf /cachus/*
            mkdir -p /cachus/.cargo
            cp -r ~/.cargo/registry /cachus/.cargo/
            cp -r target /cachus/
            cp target/debug/mn /artifacts/

      - run: |
          ls -lah "$PWD/artifacts"
          ls -lah artifacts

      - run: |
          mkdir -p ~/cachus
          echo ok
          sudo chown -R 1000:1000 ~/cachus
          sudo chown -R $(id -u):$(id -g) ~/cachus

#  B-gg-os:
#    needs: [ A-mn-os, A-mn-arch ]
#
#    strategy:
#      matrix:
#        include:
#          - os: ubuntu-18.04
#            target: x86_64-unknown-linux-musl
#            linker_flags: -static -Os
#          - os: windows-latest
#            target: x86_64-pc-windows-gnu
#          - os: macos-latest
#            target: x86_64-apple-darwin
#            linker_flags: -Os
#
#    runs-on: ${{ matrix.os }}
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Download mn hash
#        uses: actions/download-artifact@v2
#        with:
#          name: hash_${{ matrix.target }}
#          path: hash
#
#      - name: Hash
#        # ENV -> CMAKE -> Code very hard. This very easy
#        shell: bash
#        run: |
#          hash=$(cat hash/hash)
#          echo "now hash is $hash"
#          echo "const char *hash = \"$hash\";" > gg/const.h
#
#      - name: Makus
#        shell: bash
#        run: |
#          cd gg
#          if [ "${{ matrix.os }}" == "ubuntu-18.04" ]
#          then
#            sudo apt install musl-dev musl-tools
#            export CC=musl-gcc
#          fi
#          cmake -B build -DCMAKE_EXE_LINKER_FLAGS='${{ matrix.linker_flags }}' -DCMAKE_BUILD_TYPE=Release
#          cmake --build build --config Release
#          find . -type f \( -name gg -o -name gg.exe \) -exec cp {} ../gg_${{ matrix.target }} \;
#
#      - name: Upload artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: gg_${{ matrix.target }}
#          path: gg_${{ matrix.target }}
#
#
#  C-m:
#    needs: B-gg-os
#    runs-on: ubuntu-18.04
#    steps:
#      - name: Source
#        uses: actions/checkout@v2.1.0
#
#      - name: Download gg
#        uses: actions/download-artifact@v2
#
#      - name: m
#        run: |
#          mv m _m
#          mkdir -p .cache/m
#          rm -rf gg
#          for dir in gg*; do
#            for file in "$dir"/*; do
#              cp "$file" .cache/m/
#            done
#          done
#          cp _m/init.sh .cache/m/
#          chmod +x .cache/m/init.sh
#          tar -zpvcf m.tgz .cache
#          cat _m/kick.sh m.tgz > m
#
#      - name: Upload artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: m
#          path: m
#
#
#  D-test-os:
#    needs: C-m
#    strategy:
#      matrix:
#        os: [ ubuntu-18.04, ubuntu-20.04, macos-latest, windows-2019, windows-2022 ]
#
#    runs-on: ${{ matrix.os }}
#    steps:
#      - name: Download m
#        uses: actions/download-artifact@v2
#        with:
#          name: m
#
#      - name: Run!
#        run: |
#          sh m
#          echo "Nice, let's try again"
#          sh m
#
#
#  D-test-container:
#    needs: C-m
#    strategy:
#      matrix:
#        container: [ ubuntu, debian, alpine, archlinux ]
#
#    runs-on: ubuntu-latest
#    container: ${{ matrix.container }}
#    steps:
#      - name: Download m
#        uses: actions/download-artifact@v2
#        with:
#          name: m
#
#      - name: Run!
#        run: |
#          sh m
#          echo "Nice, let's try again"
#          sh m
#
#
#  E-release:
#    name: Release!
#    needs: [ D-test-os, D-test-container ]
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/master'
#    steps:
#      - name: Generate build number
#        id: buildnumber
#        uses: einaregilsson/build-number@v3
#        with:
#          token: ${{ github.token }}
#
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          tag_name: ${{ steps.buildnumber.outputs.build_number }}
#          release_name: Release ${{ steps.buildnumber.outputs.build_number }}
#          draft: false
#          prerelease: false
#
#      - name: Download m
#        uses: actions/download-artifact@v2
#        with:
#          name: m
#
#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token}}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./m
#          asset_name: m
#          asset_content_type: text/x-shellscript
